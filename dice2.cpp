#include <wiringPi.h>
#include <wiringPiI2C.h>
#include <cstdlib>
#include <ctime>
#include <iostream>
#include <vector>
#include <thread>
#include <atomic>
#include <chrono>
#include <cstring>

using namespace std;

// OLED I2C адрес
const int OLED_ADDR = 0x3C;
int oled_fd;

// Позиции на светодиодите:
// [2]   [5]   [7]
//       [3]
// [1]   [4]   [6]
const int ledPins[7] = {3, 4, 5, 6, 21, 22, 27}; // WiringPi номера съответстващи на: GPIO 22, 23, 24, 25, 5, 6, 16

// Бутони
const int buttonRoll = 0;   // GPIO 17 -> WiringPi 0
const int buttonClear = 2;  // GPIO 27 -> WiringPi 2

// Мапване на зар спрямо позиции
const vector<int> diceMap[7] = {
    {},                // 0 – нищо
    {2},               // 1 – център (LED 3)
    {1, 5},            // 2 – диагонал (LED 2 и 6)
    {1, 2, 5},         // 3 – диагонал + център
    {0, 1, 5, 6},      // 4 – четири ъгъла (LED 1,2,6,7)
    {0, 1, 2, 5, 6},   // 5 – + център
    {0, 1, 3, 4, 5, 6} // 6 – всички без център (LED 1,2,4,5,6,7)
};


const unsigned char* digits[6] = {digit_1, digit_2, digit_3, digit_4, digit_5, digit_6};

const unsigned char digit_1[96] = {
  0xFF, 0xE3, 0xC1, 0x81, 0x83, 0xC7, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xE3, 0xC1, 0x81, 0x83, 0xC7, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xE3, 0xC1, 0x81, 0x83, 0xC7, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xE3, 0xC1, 0x81, 0x83, 0xC7, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xE3, 0xC1, 0x81, 0x83, 0xC7, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xE3, 0xC1, 0x81, 0x83, 0xC7, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xE3, 0xC1, 0x81, 0x83, 0xC7, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xE3, 0xC1, 0x81, 0x83, 0xC7, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

const unsigned char digit_2[96] = {
  0xFF, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
  0xFF, 0x81, 0x00, 0x00, 0x00, 0x1C, 0x1C, 0x38, 0x70, 0x60, 0x00, 0xFF,
  0xFF, 0x81, 0x00, 0x00, 0x00, 0x1C, 0x1C, 0x38, 0x70, 0x60, 0x00, 0xFF,
  0xFF, 0x81, 0x00, 0x00, 0x00, 0x38, 0x70, 0xE0, 0xC0, 0x80, 0x00, 0xFF,
  0xFF, 0x81, 0x00, 0x00, 0x00, 0x70, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0xFF,
  0xFF, 0x81, 0x00, 0x00, 0x00, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0xFF,
  0xFF, 0x81, 0x00, 0x00, 0x00, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0xFF,
  0xFF, 0x81, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF
};

const unsigned char digit_3[96] = {
  0xFF, 0x81, 0x00, 0x00, 0x00, 0x0E, 0x1C, 0x38, 0x38, 0x1C, 0x0E, 0xFF,
  0xFF, 0x81, 0x00, 0x00, 0x00, 0x0E, 0x1C, 0x38, 0x38, 0x1C, 0x0E, 0xFF,
  0xFF, 0x81, 0x00, 0x00, 0x00, 0x1C, 0x38, 0x70, 0x70, 0x38, 0x1C, 0xFF,
  0xFF, 0x81, 0x00, 0x00, 0x00, 0x1C, 0x38, 0x70, 0x70, 0x38, 0x1C, 0xFF,
  0xFF, 0x81, 0x00, 0x00, 0x00, 0x0E, 0x1C, 0x38, 0x38, 0x1C, 0x0E, 0xFF,
  0xFF, 0x81, 0x00, 0x00, 0x00, 0x0E, 0x1C, 0x38, 0x38, 0x1C, 0x0E, 0xFF,
  0xFF, 0x81, 0x00, 0x00, 0x00, 0x0E, 0x1C, 0x38, 0x38, 0x1C, 0x0E, 0xFF,
  0xFF, 0x81, 0x00, 0x00, 0x00, 0x0E, 0x1C, 0x38, 0x38, 0x1C, 0x0E, 0xFF
};

const unsigned char digit_4[96] = {
  0xFF, 0xFF, 0xF0, 0xE0, 0xC0, 0x87, 0x0F, 0x1F, 0x3F, 0x3F, 0x1F, 0xFF,
  0xFF, 0xFF, 0xF0, 0xE0, 0xC0, 0x87, 0x0F, 0x1F, 0x3F, 0x3F, 0x1F, 0xFF,
  0xFF, 0xFF, 0xF0, 0xE0, 0xC0, 0x87, 0x0F, 0x1F, 0x3F, 0x3F, 0x1F, 0xFF,
  0xFF, 0xFF, 0xF0, 0xE0, 0xC0, 0x87, 0x0F, 0x1F, 0x3F, 0x3F, 0x1F, 0xFF,
  0xFF, 0xFF, 0xF0, 0xE0, 0xC0, 0x87, 0x0F, 0x1F, 0x3F, 0x3F, 0x1F, 0xFF,
  0xFF, 0xFF, 0xF0, 0xE0, 0xC0, 0x87, 0x0F, 0x1F, 0x3F, 0x3F, 0x1F, 0xFF,
  0xFF, 0xFF, 0xF0, 0xE0, 0xC0, 0x87, 0x0F, 0x1F, 0x3F, 0x3F, 0x1F, 0xFF,
  0xFF, 0xFF, 0xF0, 0xE0, 0xC0, 0x87, 0x0F, 0x1F, 0x3F, 0x3F, 0x1F, 0xFF
};

const unsigned char digit_5[96] = {
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0x70, 0x38, 0x1C, 0xFF,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0x70, 0x38, 0x1C, 0xFF,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0x70, 0x38, 0x1C, 0xFF,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0x70, 0x38, 0x1C, 0xFF,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0x70, 0x38, 0x1C, 0xFF,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0x70, 0x38, 0x1C, 0xFF,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0x70, 0x38, 0x1C, 0xFF,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0x70, 0x38, 0x1C, 0xFF
};

const unsigned char digit_6[96] = {
  0xFF, 0xFC, 0xF0, 0xE0, 0xC0, 0x81, 0x83, 0x87, 0x8F, 0x9F, 0x1E, 0xFF,
  0xFF, 0xFC, 0xF0, 0xE0, 0xC0, 0x81, 0x83, 0x87, 0x8F, 0x9F, 0x1E, 0xFF,
  0xFF, 0xFC, 0xF0, 0xE0, 0xC0, 0x81, 0x83, 0x87, 0x8F, 0x9F, 0x1E, 0xFF,
  0xFF, 0xFC, 0xF0, 0xE0, 0xC0, 0x81, 0x83, 0x87, 0x8F, 0x9F, 0x1E, 0xFF,
  0xFF, 0xFC, 0xF0, 0xE0, 0xC0, 0x81, 0x83, 0x87, 0x8F, 0x9F, 0x1E, 0xFF,
  0xFF, 0xFC, 0xF0, 0xE0, 0xC0, 0x81, 0x83, 0x87, 0x8F, 0x9F, 0x1E, 0xFF,
  0xFF, 0xFC, 0xF0, 0xE0, 0xC0, 0x81, 0x83, 0x87, 0x8F, 0x9F, 0x1E, 0xFF,
  0xFF, 0xFC, 0xF0, 0xE0, 0xC0, 0x81, 0x83, 0x87, 0x8F, 0x9F, 0x1E, 0xFF
};

atomic<bool> rolling(false);
atomic<bool> running(true);

void oledCommand(uint8_t cmd) {
    wiringPiI2CWriteReg8(oled_fd, 0x00, cmd);
}

void oledData(uint8_t data) {
    wiringPiI2CWriteReg8(oled_fd, 0x40, data);
}

void oledInit() {
    sendCommand(0xAE); // Display OFF
    sendCommand(0xD5); sendCommand(0x80);
    sendCommand(0xA8); sendCommand(0x3F);
    sendCommand(0xD3); sendCommand(0x00);
    sendCommand(0x40);
    sendCommand(0xAD); sendCommand(0x8B);
    sendCommand(0xA1);
    sendCommand(0xC8);
    sendCommand(0xDA); sendCommand(0x12);
    sendCommand(0x81); sendCommand(0xCF);
    sendCommand(0xD9); sendCommand(0xF1);
    sendCommand(0xDB); sendCommand(0x40);
    sendCommand(0xA4);
    sendCommand(0xA6);
    sendCommand(0xAF); // Display ON
}
 
void oledClear() {
    for (int page = 0; page < 8; ++page) {
        sendCommand(0xB0 + page);
        sendCommand(0x00);
        sendCommand(0x10);
        for (int col = 0; col < 132; ++col) {
            sendData(0x00);
        }
    }
}

void oledShowDigit(int n) {
    if (n < 1 || n > 6) return;
    oledClear();
    oledCommand(0xB2); // page 2
    oledCommand(0x20); // set lower column address to 32 (centered)
    oledCommand(0x10); // set higher column address to 0
    for (int i = 0; i < 16; i++) oledData(digits[n - 1][i]);
}

void clearLEDs() {
    for (int pin : ledPins) digitalWrite(pin, LOW);
}

void showDice(int number) {
    clearLEDs();
    for (int i : diceMap[number]) digitalWrite(ledPins[i], HIGH);
    oledShowDigit(number);
}

void rollThread() {
    while (running) {
        if (digitalRead(buttonRoll) == HIGH && !rolling) {
            rolling = true;
            int number = rand() % 6 + 1;
            cout << "Хвърляне: " << number << endl;
            showDice(number);
            this_thread::sleep_for(chrono::milliseconds(500));
            rolling = false;
        }
        this_thread::sleep_for(chrono::milliseconds(50));
    }
}

void clearThread() {
    while (running) {
        if (digitalRead(buttonClear) == HIGH) {
            cout << "Изчистване." << endl;
            clearLEDs();
            oledClear();
            this_thread::sleep_for(chrono::milliseconds(300));
        }
        this_thread::sleep_for(chrono::milliseconds(50));
    }
}

int main() {
    wiringPiSetup();

    for (int pin : ledPins) {
        pinMode(pin, OUTPUT);
        digitalWrite(pin, LOW);
    }

    pinMode(buttonRoll, INPUT);
    pullUpDnControl(buttonRoll, PUD_DOWN);
    pinMode(buttonClear, INPUT);
    pullUpDnControl(buttonClear, PUD_DOWN);

    oledInit();
    oledClear();
    srand(time(0));

    cout << "Стартирано!" << endl;

    thread t1(rollThread);
    thread t2(clearThread);

    cin.get();
    running = false;
    t1.join();
    t2.join();

    clearLEDs();
    oledClear();
    cout << "Прекратено." << endl;
    return 0;
}
